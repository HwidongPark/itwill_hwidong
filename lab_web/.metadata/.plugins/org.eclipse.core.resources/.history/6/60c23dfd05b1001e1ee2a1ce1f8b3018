package com.itwill.springboot2.domain;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;


public interface Employee2Repository extends JpaRepository<Employee2, Integer> {
    
    
    // JPA query method 작성 방법:
    
    // 부서 번호가 일치하는 모든 직원들의 정보를 검색
    // select * from employees where department_id = ?
    List<Employee2> findByDepartmentDepartmentId(Integer departmentId);
    
    //부서 이름이 일치하는 (대소문자는 구분하지 않는) 모든 직원들의 정보를 검색    
    List<Employee2> findByDepartmentDepartmentNameIgnoreCase(String departmentName);
    
    // 성(lastName)이 일치하는 모든 직원들의 정보를 검색(where last_name = ?)
    List<Employee2> findByLastName(String lastName);
    
    
    // 성(lastName)에 문자열이 포함되는 직원들의 정보(where last_name like ?)
    List<Employee2> findByLastNameLike(String lastName);
    
    // 성(lastName)에 대소문자 구분없이 특정 문자열이 포함되는 직원들의 정보
    // where upper(last_name) like upper(?) order by last_name
    List<Employee2> findByLastNameLikeIgnoreCase(String lastName);
    
    // lastName에 대소문자 구분없이 특정 문자열이 포함되고, 정렬 순서는 lastName 오름차순
    List<Employee2> findByLastNameLikeIgnoreCaseOrderByLastNameAsc(String lastName);
    
    
    // 급여(salary) 어떤 값을 초과하는 직원들의(where salary > ?)
    List<Employee2> findBySalaryGreaterThan(double salary);
    
    // 급여가 어떤 값 미만인 직원들의 정보(where salary < ?)
    List<Employee2> findBySalaryLessThan(double salary);
    
    // 급여가 어떤 범위 안에 있는 직원들의 정보(where salary between ? and ?)
    List<Employee2> findBySalaryBetween(Double minSal, Double maxSal);
    
    // 입사날짜(hireDate)가 특정 날짜 이후인 직원들의 정보(where hire_date > ?)
    List<Employee2> findByHireDateAfter(LocalDateTime hireDate);
    
    // 입사날짜가 특정 날짜 이전인 직원들의 정보(where hire_date < ?)
    List<Employee2> findByHireDateBefore(LocalDateTime hireDate);

    
    // 입사날짜가 날짜범위에 포함되는 직원들의 정보(where hire_date between ? and ?)
    
    
}
